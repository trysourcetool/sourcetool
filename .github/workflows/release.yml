name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  MAIN_IMAGE_NAME: ${{ github.repository }}
  DOCS_MCP_IMAGE_NAME: ${{ github.repository }}-docs-mcp-server
  GO_SDK_REPO: trysourcetool/sourcetool-go

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CONTAINER_REGISTRY_PAT }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.MAIN_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-mcp:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CONTAINER_REGISTRY_PAT }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta-mcp
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCS_MCP_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/mcp/docs-mcp-server/Dockerfile
          push: true
          tags: ${{ steps.meta-mcp.outputs.tags }}
          labels: ${{ steps.meta-mcp.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-go-sdk:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Validate tag format
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          if ! echo "$VERSION" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$"; then
            echo "Invalid version format: $VERSION"
            echo "Version must follow semver format: vX.Y.Z"
            exit 1
          fi

      - name: Sync Go SDK to mirror repository
        run: ./devtools/sync_go_sdk_mirror.sh "${{ secrets.GH_PAT }}" "github.com/trysourcetool/sourcetool-go.git"

      - name: Clone SDK repository
        run: |
          TEMP_DIR=$(mktemp -d)
          git clone "https://${{ secrets.GH_PAT }}@github.com/${{ env.GO_SDK_REPO }}.git" "$TEMP_DIR"
          echo "SDK_DIR=$TEMP_DIR" >> $GITHUB_ENV
          cd "$TEMP_DIR"

      - name: Create and push tag
        working-directory: ${{ env.SDK_DIR }}
        run: |
          git tag ${{ steps.get_version.outputs.VERSION }}
          git push origin ${{ steps.get_version.outputs.VERSION }}

      - name: Verify Go module availability
        working-directory: ${{ env.SDK_DIR }}
        run: |
          # Wait for the module to be available in the proxy
          for i in {1..5}; do
            if GOPROXY=proxy.golang.org go list -m github.com/${{ env.GO_SDK_REPO }}@${{ steps.get_version.outputs.VERSION }}; then
              echo "Module is available in Go proxy"
              exit 0
            fi
            echo "Waiting for module to be available in proxy..."
            sleep 30
          done
          echo "Module did not become available in proxy"
          exit 1
          
  deploy-to-render:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy Website to Render
        env:
          RENDER_DEPLOY_HOOK_WEBSITE: ${{ secrets.RENDER_DEPLOY_HOOK_WEBSITE }}
        if: env.RENDER_DEPLOY_HOOK_WEBSITE != ''
        run: |
          echo "Deploying website to Render..."
          curl "$RENDER_DEPLOY_HOOK_WEBSITE"

      - name: Deploy Docs to Render
        env:
          RENDER_DEPLOY_HOOK_DOCS: ${{ secrets.RENDER_DEPLOY_HOOK_DOCS }}
        if: env.RENDER_DEPLOY_HOOK_DOCS != ''
        run: |
          echo "Deploying docs to Render..."
          curl "$RENDER_DEPLOY_HOOK_DOCS"

  create-release:
    needs: [build-and-push, build-and-push-mcp, release-go-sdk, deploy-to-render]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NO_V=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "RELEASE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          {
            echo 'CHANGELOG<<CHANGELOG_EOF'
            ./devtools/generate_changelog.sh
            echo 'CHANGELOG_EOF'
          } >> $GITHUB_OUTPUT

      - name: Generate Go SDK changelog
        id: go_sdk_changelog
        run: |
          {
            echo 'CHANGELOG<<CHANGELOG_EOF'
            ./devtools/generate_changelog.sh "" "sdk/go"
            echo 'CHANGELOG_EOF'
          } >> $GITHUB_OUTPUT

      - name: Generate Docs MCP changelog
        id: docs_mcp_changelog
        run: |
          {
            echo 'CHANGELOG<<CHANGELOG_EOF'
            ./devtools/generate_changelog.sh "" "mcp/docs-mcp-server"
            echo 'CHANGELOG_EOF'
          } >> $GITHUB_OUTPUT

      - name: Create Docs MCP Release
        uses: softprops/action-gh-release@v1
        with:
          name: mcp/docs-mcp-server/${{ steps.get_version.outputs.VERSION }}
          tag_name: mcp/docs-mcp-server/${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.docs_mcp_changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

      - name: Create Go SDK Release
        uses: softprops/action-gh-release@v1
        with:
          name: sdk/go/${{ steps.get_version.outputs.VERSION }}
          tag_name: sdk/go/${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.go_sdk_changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

      - name: Create Main Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
