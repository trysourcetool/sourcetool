basePath: /api/v1.
definitions:
  errdefs.Error:
    properties:
      detail:
        type: string
      id:
        type: string
      meta:
        additionalProperties: {}
        type: object
      status:
        type: integer
      title:
        type: string
    type: object
  requests.AuthenticateWithInvitationMagicLinkRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  requests.AuthenticateWithMagicLinkRequest:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      token:
        type: string
    required:
    - token
    type: object
  requests.CreateAPIKeyRequest:
    properties:
      environmentId:
        type: string
      name:
        type: string
    required:
    - environmentId
    - name
    type: object
  requests.CreateEnvironmentRequest:
    properties:
      color:
        type: string
      name:
        type: string
      slug:
        type: string
    required:
    - color
    - name
    - slug
    type: object
  requests.CreateGroupRequest:
    properties:
      name:
        type: string
      slug:
        type: string
      userIds:
        items:
          type: string
        type: array
    required:
    - name
    - slug
    - userIds
    type: object
  requests.CreateOrganizationRequest:
    properties:
      subdomain:
        type: string
    required:
    - subdomain
    type: object
  requests.CreateUserInvitationsRequest:
    properties:
      emails:
        items:
          type: string
        type: array
      role:
        enum:
        - admin
        - developer
        - member
        type: string
    required:
    - emails
    - role
    type: object
  requests.RegisterWithInvitationMagicLinkRequest:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      token:
        type: string
    required:
    - firstName
    - lastName
    - token
    type: object
  requests.RegisterWithMagicLinkRequest:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      token:
        type: string
    type: object
  requests.RequestMagicLinkRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requests.SaveAuthRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  requests.SendUpdateMeEmailInstructionsRequest:
    properties:
      email:
        type: string
      emailConfirmation:
        type: string
    required:
    - email
    - emailConfirmation
    type: object
  requests.UpdateAPIKeyRequest:
    properties:
      name:
        type: string
    type: object
  requests.UpdateEnvironmentRequest:
    properties:
      color:
        type: string
      name:
        type: string
    required:
    - color
    - name
    type: object
  requests.UpdateGroupRequest:
    properties:
      name:
        type: string
      userIds:
        items:
          type: string
        type: array
    required:
    - name
    - userIds
    type: object
  requests.UpdateMeEmailRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  requests.UpdateMeRequest:
    properties:
      firstName:
        type: string
      lastName:
        type: string
    type: object
  requests.UpdateUserRequest:
    properties:
      groupIds:
        items:
          type: string
        type: array
      role:
        enum:
        - admin
        - developer
        - member
        type: string
    type: object
  responses.APIKeyResponse:
    properties:
      createdAt:
        type: string
      environment:
        $ref: '#/definitions/responses.EnvironmentResponse'
      id:
        type: string
      key:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  responses.AuthenticateWithGoogleResponse:
    properties:
      authUrl:
        type: string
      firstName:
        type: string
      hasMultipleOrganizations:
        type: boolean
      hasOrganization:
        type: boolean
      isNewUser:
        type: boolean
      lastName:
        type: string
      token:
        type: string
    type: object
  responses.AuthenticateWithInvitationMagicLinkResponse:
    properties:
      authUrl:
        type: string
      isNewUser:
        type: boolean
      token:
        type: string
    type: object
  responses.AuthenticateWithMagicLinkResponse:
    properties:
      authUrl:
        type: string
      hasOrganization:
        type: boolean
      isNewUser:
        type: boolean
      token:
        type: string
    type: object
  responses.CreateAPIKeyResponse:
    properties:
      apiKey:
        $ref: '#/definitions/responses.APIKeyResponse'
    type: object
  responses.CreateEnvironmentResponse:
    properties:
      environment:
        $ref: '#/definitions/responses.EnvironmentResponse'
    type: object
  responses.CreateGroupResponse:
    properties:
      group:
        $ref: '#/definitions/responses.GroupResponse'
    type: object
  responses.CreateOrganizationResponse:
    properties:
      organization:
        $ref: '#/definitions/responses.OrganizationResponse'
    type: object
  responses.CreateUserInvitationsResponse:
    properties:
      userInvitations:
        items:
          $ref: '#/definitions/responses.UserInvitationResponse'
        type: array
    type: object
  responses.DeleteAPIKeyResponse:
    properties:
      apiKey:
        $ref: '#/definitions/responses.APIKeyResponse'
    type: object
  responses.DeleteEnvironmentResponse:
    properties:
      environment:
        $ref: '#/definitions/responses.EnvironmentResponse'
    type: object
  responses.DeleteGroupResponse:
    properties:
      group:
        $ref: '#/definitions/responses.GroupResponse'
    type: object
  responses.EnvironmentResponse:
    properties:
      color:
        type: string
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updatedAt:
        type: string
    type: object
  responses.GetAPIKeyResponse:
    properties:
      apiKey:
        $ref: '#/definitions/responses.APIKeyResponse'
    type: object
  responses.GetEnvironmentResponse:
    properties:
      environment:
        $ref: '#/definitions/responses.EnvironmentResponse'
    type: object
  responses.GetGroupResponse:
    properties:
      group:
        $ref: '#/definitions/responses.GroupResponse'
    type: object
  responses.GetMeResponse:
    properties:
      user:
        $ref: '#/definitions/responses.UserResponse'
    type: object
  responses.GroupPageResponse:
    properties:
      createdAt:
        type: string
      groupId:
        type: string
      id:
        type: string
      pageId:
        type: string
      updatedAt:
        type: string
    type: object
  responses.GroupResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      slug:
        type: string
      updatedAt:
        type: string
    type: object
  responses.HostInstanceResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      sdkName:
        type: string
      sdkVersion:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  responses.ListAPIKeysResponse:
    properties:
      devKey:
        $ref: '#/definitions/responses.APIKeyResponse'
      liveKeys:
        items:
          $ref: '#/definitions/responses.APIKeyResponse'
        type: array
    type: object
  responses.ListEnvironmentsResponse:
    properties:
      environments:
        items:
          $ref: '#/definitions/responses.EnvironmentResponse'
        type: array
    type: object
  responses.ListGroupsResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/responses.GroupResponse'
        type: array
      userGroups:
        items:
          $ref: '#/definitions/responses.UserGroupResponse'
        type: array
      users:
        items:
          $ref: '#/definitions/responses.UserResponse'
        type: array
    type: object
  responses.ListPagesResponse:
    properties:
      groupPages:
        items:
          $ref: '#/definitions/responses.GroupPageResponse'
        type: array
      groups:
        items:
          $ref: '#/definitions/responses.GroupResponse'
        type: array
      pages:
        items:
          $ref: '#/definitions/responses.PageResponse'
        type: array
      userGroups:
        items:
          $ref: '#/definitions/responses.UserGroupResponse'
        type: array
      users:
        items:
          $ref: '#/definitions/responses.UserResponse'
        type: array
    type: object
  responses.ListUsersResponse:
    properties:
      userInvitations:
        items:
          $ref: '#/definitions/responses.UserInvitationResponse'
        type: array
      users:
        items:
          $ref: '#/definitions/responses.UserResponse'
        type: array
    type: object
  responses.ObtainAuthTokenResponse:
    properties:
      authUrl:
        type: string
      token:
        type: string
    type: object
  responses.OrganizationResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      subdomain:
        type: string
      updatedAt:
        type: string
      webSocketEndpoint:
        type: string
    type: object
  responses.PageResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      route:
        type: string
      updatedAt:
        type: string
    type: object
  responses.PingHostInstanceResponse:
    properties:
      hostInstance:
        $ref: '#/definitions/responses.HostInstanceResponse'
    type: object
  responses.RefreshTokenResponse:
    properties:
      expiresAt:
        type: string
    type: object
  responses.RegisterWithGoogleResponse:
    properties:
      authUrl:
        type: string
      hasOrganization:
        type: boolean
      token:
        type: string
    type: object
  responses.RegisterWithInvitationMagicLinkResponse:
    properties:
      expiresAt:
        type: string
    type: object
  responses.RegisterWithMagicLinkResponse:
    properties:
      expiresAt:
        type: string
      hasOrganization:
        type: boolean
    type: object
  responses.RequestGoogleAuthLinkResponse:
    properties:
      authUrl:
        type: string
    type: object
  responses.RequestInvitationGoogleAuthLinkResponse:
    properties:
      authUrl:
        type: string
    type: object
  responses.RequestInvitationMagicLinkResponse:
    properties:
      email:
        type: string
    type: object
  responses.RequestMagicLinkResponse:
    properties:
      email:
        type: string
      isNew:
        type: boolean
    type: object
  responses.ResendUserInvitationResponse:
    properties:
      userInvitation:
        $ref: '#/definitions/responses.UserInvitationResponse'
    type: object
  responses.SaveAuthResponse:
    properties:
      expiresAt:
        type: string
      redirectUrl:
        type: string
    type: object
  responses.StatusResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  responses.UpdateAPIKeyResponse:
    properties:
      apiKey:
        $ref: '#/definitions/responses.APIKeyResponse'
    type: object
  responses.UpdateEnvironmentResponse:
    properties:
      environment:
        $ref: '#/definitions/responses.EnvironmentResponse'
    type: object
  responses.UpdateGroupResponse:
    properties:
      group:
        $ref: '#/definitions/responses.GroupResponse'
    type: object
  responses.UpdateMeEmailResponse:
    properties:
      user:
        $ref: '#/definitions/responses.UserResponse'
    type: object
  responses.UpdateMeResponse:
    properties:
      user:
        $ref: '#/definitions/responses.UserResponse'
    type: object
  responses.UpdateUserResponse:
    properties:
      user:
        $ref: '#/definitions/responses.UserResponse'
    type: object
  responses.UserGroupResponse:
    properties:
      createdAt:
        type: string
      groupId:
        type: string
      id:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    type: object
  responses.UserInvitationResponse:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
    type: object
  responses.UserResponse:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      organization:
        $ref: '#/definitions/responses.OrganizationResponse'
      role:
        type: string
      updatedAt:
        type: string
    type: object
host: https://api.trysourcetool.com
info:
  contact: {}
  description: Sourcetool's API documentation
  termsOfService: http://swagger.io/terms/
  title: Sourcetool API
  version: "1.0"
paths:
  /apiKeys:
    get:
      consumes:
      - application/json
      operationId: list-apikeys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ListAPIKeysResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - apiKeys
    post:
      consumes:
      - application/json
      operationId: create-apikey
      parameters:
      - description: API key creation data including name and expiration
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.CreateAPIKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateAPIKeyResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/errdefs.Error'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/errdefs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - apiKeys
  /apiKeys/{apiKeyID}:
    delete:
      consumes:
      - application/json
      operationId: delete-apikey
      parameters:
      - description: API Key ID
        in: path
        name: apiKeyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.DeleteAPIKeyResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - apiKeys
    get:
      consumes:
      - application/json
      operationId: get-apikey
      parameters:
      - description: API Key ID
        in: path
        name: apiKeyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.GetAPIKeyResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - apiKeys
    put:
      consumes:
      - application/json
      operationId: update-apikey
      parameters:
      - description: API key update data including name and status
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateAPIKeyRequest'
      - description: API Key ID to update
        in: path
        name: apiKeyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UpdateAPIKeyResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/errdefs.Error'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/errdefs.Error'
        "404":
          description: API key not found
          schema:
            $ref: '#/definitions/errdefs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - apiKeys
  /auth/google/authenticate:
    post:
      consumes:
      - application/json
      operationId: authenticate-with-google
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.AuthenticateWithGoogleResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/google/register:
    post:
      consumes:
      - application/json
      operationId: register-with-google
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RegisterWithGoogleResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/google/request:
    post:
      consumes:
      - application/json
      operationId: request-google-auth-link
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RequestGoogleAuthLinkResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/invitations/google/request:
    post:
      consumes:
      - application/json
      operationId: request-invitation-google-auth-link
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RequestInvitationGoogleAuthLinkResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/invitations/magic/authenticate:
    post:
      consumes:
      - application/json
      operationId: authenticate-with-invitation-magic-link
      parameters:
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.AuthenticateWithInvitationMagicLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.AuthenticateWithInvitationMagicLinkResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/invitations/magic/register:
    post:
      consumes:
      - application/json
      operationId: register-with-invitation-magic-link
      parameters:
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterWithInvitationMagicLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RegisterWithInvitationMagicLinkResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/invitations/magic/request:
    post:
      consumes:
      - application/json
      operationId: request-invitation-magic-link
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RequestInvitationMagicLinkResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      operationId: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.StatusResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/magic/authenticate:
    post:
      consumes:
      - application/json
      operationId: authenticate-with-magic-link
      parameters:
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.AuthenticateWithMagicLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.AuthenticateWithMagicLinkResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/magic/register:
    post:
      consumes:
      - application/json
      operationId: register-with-magic-link
      parameters:
      - description: Registration data with magic link token
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterWithMagicLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RegisterWithMagicLinkResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/errdefs.Error'
        "401":
          description: Invalid or expired magic link token
          schema:
            $ref: '#/definitions/errdefs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/magic/request:
    post:
      consumes:
      - application/json
      operationId: request-magic-link
      parameters:
      - description: Email address for magic link
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.RequestMagicLinkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RequestMagicLinkResponse'
        "400":
          description: Invalid email format
          schema:
            $ref: '#/definitions/errdefs.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errdefs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      operationId: refresh-token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RefreshTokenResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/save:
    post:
      consumes:
      - application/json
      operationId: save-auth
      parameters:
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.SaveAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SaveAuthResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /auth/token/obtain:
    post:
      consumes:
      - application/json
      operationId: obtain-auth-token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ObtainAuthTokenResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - auth
  /environments:
    get:
      consumes:
      - application/json
      operationId: list-environments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ListEnvironmentsResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - environments
    post:
      consumes:
      - application/json
      operationId: create-environment
      parameters:
      - description: Environment creation data including name and configuration
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.CreateEnvironmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateEnvironmentResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/errdefs.Error'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/errdefs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - environments
  /environments/{environmentID}:
    delete:
      consumes:
      - application/json
      operationId: delete-environment
      parameters:
      - description: Environment ID
        in: path
        name: environmentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.DeleteEnvironmentResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - environments
    get:
      consumes:
      - application/json
      operationId: get-environment
      parameters:
      - description: Environment ID
        in: path
        name: environmentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.GetEnvironmentResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - environments
    put:
      consumes:
      - application/json
      operationId: update-environment
      parameters:
      - description: Environment update data including name and configuration
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateEnvironmentRequest'
      - description: Environment ID to update
        in: path
        name: environmentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UpdateEnvironmentResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/errdefs.Error'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/errdefs.Error'
        "404":
          description: Environment not found
          schema:
            $ref: '#/definitions/errdefs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - environments
  /groups:
    get:
      consumes:
      - application/json
      operationId: list-groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ListGroupsResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - groups
    post:
      consumes:
      - application/json
      operationId: create-group
      parameters:
      - description: Group creation data including name and members
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateGroupResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/errdefs.Error'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/errdefs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - groups
  /groups/{groupID}:
    delete:
      consumes:
      - application/json
      operationId: delete-group
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.DeleteGroupResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - groups
    get:
      consumes:
      - application/json
      operationId: get-group
      parameters:
      - description: Group ID
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.GetGroupResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - groups
    put:
      consumes:
      - application/json
      operationId: update-group
      parameters:
      - description: Group update data including name and members
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateGroupRequest'
      - description: Group ID to update
        in: path
        name: groupID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UpdateGroupResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/errdefs.Error'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/errdefs.Error'
        "404":
          description: Group not found
          schema:
            $ref: '#/definitions/errdefs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - groups
  /hostInstances/ping:
    get:
      consumes:
      - application/json
      operationId: ping-host-instance
      parameters:
      - description: Page ID
        in: query
        name: pageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PingHostInstanceResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - hostInstances
  /organizations:
    post:
      consumes:
      - application/json
      operationId: create-organization
      parameters:
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateOrganizationResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - organizations
  /organizations/checkSubdomainAvailability:
    get:
      consumes:
      - application/json
      operationId: check-organization-subdomain-availability
      parameters:
      - description: Subdomain to check for availability
        in: query
        name: subdomain
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.StatusResponse'
        "400":
          description: Invalid subdomain format
          schema:
            $ref: '#/definitions/errdefs.Error'
        "409":
          description: Subdomain already exists
          schema:
            $ref: '#/definitions/errdefs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - organizations
  /pages:
    get:
      consumes:
      - application/json
      operationId: list-pages
      parameters:
      - description: Environment ID
        in: query
        name: environmentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ListPagesResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - pages
  /users:
    get:
      consumes:
      - application/json
      operationId: list-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ListUsersResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - users
  /users/{userID}:
    delete:
      consumes:
      - application/json
      operationId: delete-user
      parameters:
      - description: ' '
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.StatusResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - users
    put:
      consumes:
      - application/json
      operationId: update-user
      parameters:
      - description: ' '
        in: path
        name: userID
        required: true
        type: string
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UpdateUserResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - users
  /users/invitations:
    post:
      consumes:
      - application/json
      operationId: create-user-invitations
      parameters:
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUserInvitationsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateUserInvitationsResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - users
  /users/invitations/{invitationID}/resend:
    post:
      consumes:
      - application/json
      operationId: resend-user-invitation
      parameters:
      - description: ' '
        in: path
        name: invitationID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ResendUserInvitationResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      operationId: get-me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.GetMeResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - users
    put:
      consumes:
      - application/json
      operationId: update-me
      parameters:
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateMeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UpdateMeResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - users
  /users/me/email:
    put:
      consumes:
      - application/json
      operationId: update-me-email
      parameters:
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateMeEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UpdateMeEmailResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - users
  /users/me/email/instructions:
    post:
      consumes:
      - application/json
      operationId: send-update-me-email-instructions
      parameters:
      - description: ' '
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/requests.SendUpdateMeEmailInstructionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.StatusResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/errdefs.Error'
      tags:
      - users
swagger: "2.0"
