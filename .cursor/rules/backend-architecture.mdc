---
description: 
globs: backend/**
alwaysApply: false
---
# Backend architecture

These rules reflect the **current** package layout (`server → {database, pubsub, mail, permission} → infra → core`). Use them for all new code reviews and CI checks.


---

## Layer map & allowed imports

| Layer & path                                   | Purpose                                              | May **import**                                      |
|---|---|---|
| **core** `internal/core/**`                    | Pure domain entities & helpers – **no I/O**          | **stdlib**, tiny 3rd‑party (uuid, errors)            |
| **database** `internal/database/**`            | Database interfaces & query builders                 | **core**, stdlib, sqlx                               |
| **infra** `internal/{postgres,mail,pubsub,ws}/**` | Concrete adapters (DB, SMTP, Redis, WS)             | **core**, **database**, support pkgs, stdlib, 3rd‑party |
| **permission** `internal/permission/**`         | Authorization & RBAC implementation                  | **core**, **database**, support pkgs, stdlib          |
| **server** `internal/server/**`                | HTTP/WS routers, handlers, DTOs, middleware          | **core**, **database**, **infra**, **permission**, support pkgs, stdlib, 3rd‑party |
| **support** `internal/{config,logger,jwt,google,errdefs}`, `internal/context.go`, `internal/url.go`, `internal/pb/go/**` | Cross‑cutting util & generated code | usable from any layer (never import `internal/server` from support pkgs) |

### Dependency direction

```
server → {database, pubsub, mail, permission} → infra → core
```

* `core` never depends on adapters or HTTP.
* `database` defines interfaces and query builders for data persistence.
* `infra` implements concrete adapters (DB, Redis, SMTP) and depends on `core`.
* `pubsub`, `mail`, and `permission` provide high-level services using infra implementations.
* `server` wires everything; it can depend on any layer below.

---

## Directory conventions

* **Core** package per model (`apikey`, `user`, …) containing structs and small helper methods.
* **Database** package contains:
  * Model interfaces and base types (`internal/database/<model>.go`)
  * Common database utilities and interfaces (`internal/database/database.go`)
* **Infra** adapter per tech:
  * `internal/postgres/<model>.go` (concrete SQL implementations)
  * `internal/postgres/<model>_ce.go` and `<model>_ee.go` (edition-specific implementations)
  * `internal/pubsub/redis.go`
  * `internal/mail/smtp.go`
  * `internal/ws/manager.go`
* **Permission** package:
  * `internal/permission/checker.go` (RBAC implementation)
  * Authorization middleware and helpers
* **Server** keeps CE/EE variations with build‑tag files inside the same directory tree (e.g. `group_ee.go`, `websocket_ee.go`). There is **no separate `ee/internal` directory**.
  * Request/response DTOs under `internal/server/{requests,responses}`.
  * `internal/server/middleware.go`, `validate.go`, etc.
* **Composition root**: `cmd/server/main.go` (sets up config, DB, Redis, SMTP, WS manager, router).
* Tests live next to code (`*_test.go`) and cross layers only via exported interfaces.

---

## Import linter rules

* `internal/core/**` **must not** import any `internal/server/**`, `internal/database/**`, or `internal/{postgres,pubsub,mail,ws,...}/**` packages.
* `internal/database/**` **must not** import any `internal/server/**` or `internal/{postgres,pubsub,mail,ws,...}/**` packages.
* `internal/{postgres,mail,pubsub,ws}/**` **must not** import `internal/server/**`.
* `internal/permission/**` **must not** import `internal/server/**` or `internal/{postgres,pubsub,mail,ws}/**`.
* `internal/server/**` **must not** import sibling sub‑directories of itself to avoid cycles.
* Generated protobuf in `internal/pb/go/**` is allowed anywhere, but heavy message types should stay out of `core`.
* Enforce with `golangci‑lint` (`revive import‑graph`).

---

## CE / EE Split

Sourcetool Community Edition (CE) and Enterprise Edition (EE) are separated at the **file level** using Go build tags, e.g.:  
`//go:build ee` and `//go:build !ee`.  
Files live next to each other in the same package (`group_ce.go`, `group_ee.go`). They follow the same import rules described above.

---
