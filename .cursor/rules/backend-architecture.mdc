---
description: 
globs: backend/**
alwaysApply: false
---
# Backend architecture

These rules reflect the **current** package layout (`core → infra → server`). Use them for all new code reviews and CI checks.

---

## Layer map & allowed imports

| Layer & path                                   | Purpose                                              | May **import**                                      |
|------------------------------------------------|------------------------------------------------------|------------------------------------------------------|
| **core** `internal/core/**`                    | Pure domain entities & helpers – **no I/O**          | **stdlib**, tiny 3rd‑party (uuid, errors)            |
| **infra** `internal/{postgres,mail,pubsub,ws,permission}/**` | Concrete adapters (DB, SMTP, Redis, WS, RBAC)       | **core**, support pkgs, stdlib, 3rd‑party            |
| **server** `internal/server/**`                | HTTP/WS routers, handlers, DTOs, middleware          | **core**, **infra**, support pkgs, stdlib, 3rd‑party |
| **support** `internal/{config,logger,jwt,google,errdefs}`, `internal/context.go`, `internal/url.go`, `internal/pb/go/**` | Cross‑cutting util & generated code | usable from any layer (never import `internal/server` from support pkgs) |

### Dependency direction

```
server  →  infra  →  core
```

* `core` never depends on adapters or HTTP.
* `infra` implements persistence / external‑service logic and depends on `core`.
* `server` wires everything; it can depend on anything below.

---

## Directory conventions

* **Core** package per model (`apikey`, `user`, …) containing structs and small helper methods.
* **Infra** adapter per tech:
  * `internal/postgres/<model>_query.go` (+ optional `<model>.go` for repo helpers)
  * `internal/pubsub/redis.go`
  * `internal/mail/smtp.go`
  * `internal/ws/manager.go`
  * `internal/permission/checker.go`
* **Server** keeps CE/EE variations with build‑tag files inside the same directory tree (e.g. `group_ee.go`, `websocket_ee.go`). There is **no separate `ee/internal` directory**.
  * Request/response DTOs under `internal/server/{requests,responses}`.
  * `internal/server/middleware.go`, `validate.go`, etc.
* **Composition root**: `cmd/server/main.go` (sets up config, DB, Redis, SMTP, WS manager, router).
* Tests live next to code (`*_test.go`) and cross layers only via exported interfaces.

---

## Import linter rules

* `internal/core/**` **must not** import any `internal/server/**` or `internal/{postgres,pubsub,mail,ws,...}/**` packages.
* `internal/{postgres,mail,pubsub,ws,permission}/**` **must not** import `internal/server/**`.
* `internal/server/**` **must not** import sibling sub‑directories of itself to avoid cycles.
* Generated protobuf in `internal/pb/go/**` is allowed anywhere, but heavy message types should stay out of `core`.
* Enforce with `golangci‑lint` (`revive import‑graph`).

---

## CE / EE Split

Sourcetool Community Edition (CE) and Enterprise Edition (EE) are separated at the **file level** using Go build tags, e.g.:  
`//go:build ee` and `//go:build !ee`.  
Files live next to each other in the same package (`group_ce.go`, `group_ee.go`). They follow the same import rules described above.

---
